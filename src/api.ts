/**
 * A mock API backend, based on RxJS `Observable`s.
 *
 * DO NOT EDIT THIS FILE! :P
 */
import {Observable, of, throwError} from "rxjs";
import {delay, tap} from "rxjs/operators";

/**
 * A todo list item.
 */
export interface Todo {
    readonly id: number;
    readonly message: string;
    readonly isDone: boolean;
}

/**
 * Loads an array of `Todo` items from the database.
 *
 * This observable represents a single HTTP request. It emits a single array of `Todo`, then completes.
 */
export function getTodoList(): Observable<ReadonlyArray<Todo>> {
    return of(Array.from(loadTodos().values())).pipe(delay(1000), tap((): void => {
        console.log("Mock API GET");
    }));
}

/**
 * Adds a new `Todo` with the given message.
 *
 * This observable represents a single HTTP request. It emits the resultant `Todo`, then completes.
 */
export function addTodo(message: string): Observable<Todo> {
    const todos = loadTodos();
    const id = Math.max(0, ...Array.from(todos.keys())) + 1;
    const todo = {id, message, isDone: false};
    return of(todo).pipe(delay(1000), tap((): void => {
        console.log("Mock API POST");
        todos.set(id, todo);
        saveTodos(todos);
    }));
}

/**
 * Updates a `Todo`.
 *
 * A `Todo` with the given ID must exist in the database, or an error will be emitted.
 *
 * This observable represents a single HTTP request. It emits the resultant `Todo`, then completes.
 */
export function updateTodo(todo: Todo): Observable<Todo> {
    const todos = loadTodos();
    if (!todos.has(todo.id)) {
        return throwError({message: "Invalid todo ID"});
    }
    return of(todo).pipe(delay(1000), tap((): void => {
        console.log("Mock API PUT");
        todos.set(todo.id, todo);
        saveTodos(todos);
    }));
}

/**
 * Deletes a `Todo`.
 *
 * A `Todo` with the given ID must exist in the database, or an error will be emitted.
 *
 * This observable represents a single HTTP request. It emits a null value, then completes.
 */
export function deleteTodo(id: number): Observable<null> {
    const todos = loadTodos();
    if (!todos.has(id)) {
        return throwError({message: "Invalid todo ID"});
    }
    return of(null).pipe(delay(1000), tap((): void => {
        console.log("Mock API DELETE");
        todos.delete(id);
        saveTodos(todos);
    }));
}

// A fake storage backend for the API methods.
// DO NOT USE THESE DIRECTLY! Use the mock API methods above.

function loadTodos(): Map<number, Todo> {
    const existing = localStorage.getItem("todos");
    const todos = new Map<number, Todo>();
    if (existing === null) {
        todos.set(1, {id: 1, message: "Feed the cat", isDone: false});
        todos.set(2, {id: 2, message: "Walk the dog", isDone: true});
        saveTodos(todos);
    } else {
        for (const todo of JSON.parse(existing) as ReadonlyArray<Todo>) {
            todos.set(todo.id, todo);
        }
    }
    return todos;
}

function saveTodos(todos: Map<number, Todo>): void {
    localStorage.setItem("todos", JSON.stringify(Array.from(todos.values())));
}
