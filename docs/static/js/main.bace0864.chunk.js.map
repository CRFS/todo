{"version":3,"sources":["TodoList.module.css","api.ts","TodoList.tsx","Welcome.tsx","App.tsx","index.tsx","App.module.css"],"names":["module","exports","loadTodos","existing","localStorage","getItem","todos","Map","set","id","message","isDone","saveTodos","JSON","parse","todo","setItem","stringify","Array","from","values","DEFAULT_TODOS","TodoList","subscriptionsRef","React","useRef","Set","useState","isUpdating","setIsUpdating","useEffect","current","forEach","subscription","unsubscribe","subscribe","observable","next","complete","delete","size","add","setTodos","NEVER","timer","pipe","exhaustMap","of","delay","tap","console","log","map","todoList","className","styles","loading","key","check","type","checked","onChange","newTodos","newTodo","has","throwError","api","onClick","action","prompt","Math","max","keys","Welcome","Nav","NavEntry","props","children","nav","selectedNav","setSelectedNav","navEntrySelected","navEntry","ReactDOM","render","content","header","container","branding","document","getElementById"],"mappings":"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","file":"static/js/main.bace0864.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"TodoList_loading__Mt9H6\",\"todo\":\"TodoList_todo__1UXV1\",\"check\":\"TodoList_check__1Dlbs\",\"action\":\"TodoList_action__3UJa6\",\"delete\":\"TodoList_delete__21RwW TodoList_action__3UJa6\"};","/**\n * A mock API backend, based on RxJS `Observable`s.\n *\n * DO NOT EDIT THIS FILE! :P\n */\nimport {Observable, of, throwError} from \"rxjs\";\nimport {delay, tap} from \"rxjs/operators\";\n\n/**\n * A todo list item.\n */\nexport interface Todo {\n    readonly id: number;\n    readonly message: string;\n    readonly isDone: boolean;\n}\n\n/**\n * Loads an array of `Todo` items from the database.\n *\n * This observable represents a single HTTP request. It emits a single array of `Todo`, then completes.\n */\nexport function getTodoList(): Observable<ReadonlyArray<Todo>> {\n    return of(Array.from(loadTodos().values())).pipe(delay(1000), tap((): void => {\n        console.log(\"Mock API GET\");\n    }));\n}\n\n/**\n * Adds a new `Todo` with the given message.\n *\n * This observable represents a single HTTP request. It emits the resultant `Todo`, then completes.\n */\nexport function addTodo(message: string): Observable<Todo> {\n    const todos = loadTodos();\n    const id = Math.max(0, ...Array.from(todos.keys())) + 1;\n    const todo = {id, message, isDone: false};\n    return of(todo).pipe(delay(1000), tap((): void => {\n        console.log(\"Mock API POST\");\n        todos.set(id, todo);\n        saveTodos(todos);\n    }));\n}\n\n/**\n * Updates a `Todo`.\n *\n * A `Todo` with the given ID must exist in the database, or an error will be emitted.\n *\n * This observable represents a single HTTP request. It emits the resultant `Todo`, then completes.\n */\nexport function updateTodo(todo: Todo): Observable<Todo> {\n    const todos = loadTodos();\n    if (!todos.has(todo.id)) {\n        return throwError({message: \"Invalid todo ID\"});\n    }\n    return of(todo).pipe(delay(1000), tap((): void => {\n        console.log(\"Mock API PUT\");\n        todos.set(todo.id, todo);\n        saveTodos(todos);\n    }));\n}\n\n/**\n * Deletes a `Todo`.\n *\n * A `Todo` with the given ID must exist in the database, or an error will be emitted.\n *\n * This observable represents a single HTTP request. It emits a null value, then completes.\n */\nexport function deleteTodo(id: number): Observable<null> {\n    const todos = loadTodos();\n    if (!todos.has(id)) {\n        return throwError({message: \"Invalid todo ID\"});\n    }\n    return of(null).pipe(delay(1000), tap((): void => {\n        console.log(\"Mock API DELETE\");\n        todos.delete(id);\n        saveTodos(todos);\n    }));\n}\n\n// A fake storage backend for the API methods.\n// DO NOT USE THESE DIRECTLY! Use the mock API methods above.\n\nfunction loadTodos(): Map<number, Todo> {\n    const existing = localStorage.getItem(\"todos\");\n    const todos = new Map<number, Todo>();\n    if (existing === null) {\n        todos.set(1, {id: 1, message: \"Feed the cat\", isDone: false});\n        todos.set(2, {id: 2, message: \"Walk the dog\", isDone: true});\n        saveTodos(todos);\n    } else {\n        for (const todo of JSON.parse(existing) as ReadonlyArray<Todo>) {\n            todos.set(todo.id, todo);\n        }\n    }\n    return todos;\n}\n\nfunction saveTodos(todos: Map<number, Todo>): void {\n    localStorage.setItem(\"todos\", JSON.stringify(Array.from(todos.values())));\n}\n","import * as api from \"./api\";\nimport styles from \"./TodoList.module.css\";\nimport React from \"react\";\nimport {Observable, NEVER, Subscription, timer} from \"rxjs\";\nimport {exhaustMap, map} from \"rxjs/operators\";\n\nconst DEFAULT_TODOS: ReadonlyMap<number, api.Todo> = new Map();\n\nexport default function TodoList(): JSX.Element {\n    // Observable subscription management. All subscriptions need to be cleaned up on component unmount to prevent\n    // leakage of resources or state changes on an unmounted component. It's dangerous to call `.subscribe()` directly\n    // in a component.\n    const subscriptionsRef = React.useRef<Set<Subscription>>(new Set());\n    const [isUpdating, setIsUpdating] = React.useState(false);\n    React.useEffect(\n        (): () => void => (): void => {\n            subscriptionsRef.current.forEach((subscription: Subscription): void => {\n                subscription.unsubscribe();\n            });\n        },\n        [],\n    );\n    const subscribe = function<T>(observable: Observable<T>, next?: (value: T) => void): void {\n        // Subscribe to the observable.\n        setIsUpdating(true);\n        const subscription = observable.subscribe({\n            next,\n            // On complete, de-register the subscription.\n            complete: (): void => {\n                subscriptionsRef.current.delete(subscription);\n                setIsUpdating(subscriptionsRef.current.size > 0);\n            },\n        });\n        subscriptionsRef.current.add(subscription);\n    };\n    // Subscribe to the list of todos on component mount, and unsubscribe on component unmount.\n    // Using a DEFAULT_TODOS constant lets us detect whether the first batch of todos have been loaded.\n    // Todos are stored indexed by `id` in a `Map`.\n    const [todos, setTodos] = React.useState<ReadonlyMap<number, api.Todo>>(DEFAULT_TODOS);\n    React.useEffect(\n        (): () => void => {\n            // If we're in the process of updating, don't poll the API, since it could clash with incoming polled data.\n            // Once we're done updating, re-subscribe to the API.\n            const subscription = (isUpdating ? NEVER : timer(0, 5000).pipe(\n                exhaustMap((): Observable<ReadonlyArray<api.Todo>> => api.getTodoList()),\n                map((todoList: ReadonlyArray<api.Todo>): Map<number, api.Todo> => {\n                    return new Map(todoList.map((todo: api.Todo): [number, api.Todo] => [todo.id, todo]));\n                }),\n            )).subscribe(setTodos);\n            return (): void => { subscription.unsubscribe(); };\n        },\n        [isUpdating],\n    );\n    // Adding a new todo.\n    const onAdd = (): void => {\n        const message = prompt(\"Enter new todo\");\n        if (message !== null) {\n            subscribe(api.addTodo(message), (newTodo: api.Todo): void => {\n                // Optimistically add the todo to our state ahead of the next poll, to keep things snappy.\n                const newTodos = new Map(todos);\n                newTodos.set(newTodo.id, newTodo);\n                setTodos(newTodos);\n            });\n        }\n    };\n    // Render the todo list!\n    return <>\n        <h1>Todo list</h1>\n        {todos === DEFAULT_TODOS ? (\n            <p className={styles.loading}>Loading...</p>\n        ) : (<>\n            {todos.size === 0 ? (\n                <p><em>No todos.</em></p>\n            ) : (Array.from(todos.values()).map((todo: api.Todo): JSX.Element => {\n                // Todo editing.\n                const onChange = (): void => {\n                    // Optimistically update the todo in our state ahead of the next poll, to keep things snappy.\n                    const newTodos = new Map(todos);\n                    const newTodo: api.Todo = {...todo, isDone: !todo.isDone};\n                    newTodos.set(todo.id, newTodo);\n                    setTodos(newTodos);\n                    // Actually make the API call.\n                    subscribe(api.updateTodo(newTodo));\n                };\n                // Todo deletion.\n                const onDelete = (): void => {\n                    // Optimistically delete the todo from our state ahead of the next poll, to keep things snappy.\n                    const newTodos = new Map(todos);\n                    newTodos.delete(todo.id);\n                    setTodos(newTodos);\n                    // Actually make the API call.\n                    subscribe(api.deleteTodo(todo.id));\n                };\n                // Render the todo.\n                return (\n                    <div key={todo.id} className={styles.todo}>\n                        <input className={styles.check} type=\"checkbox\" checked={todo.isDone} onChange={onChange} />\n                        {todo.message}\n                        <span className={styles.delete} onClick={onDelete}>delete</span>\n                    </div>\n                );\n            }))}\n            <p><span className={styles.action} onClick={onAdd}>+ Add todo</span></p>\n        </>)}\n    </>;\n}\n","import React from \"react\";\n\nexport default function Welcome(): JSX.Element {\n    return <>\n        <h1>Welcome to CRFS Todo Manager</h1>\n        <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. In elementum tortor sit amet massa posuere, ege\n            gravida leo sagittis. Proin fringilla, nibh sed accumsan posuere, est justo mattis metus.\n        </p>\n        <p>\n            Cras elit mi, elementum sit amet gravida quis, vestibulum vitae ligula.\n        </p>\n\n        <h2>Duis enim mauris</h2>\n        <p>\n            Mauris vel vulputate risus. Donec eu neque ultrices, semper magna et, porta ligula. Integer dignissim\n            scelerisque ante in ornare. Mauris suscipit mauris at iaculis vestibulum. Orci varius natoque penatibus et\n            magnis dis parturient montes, nascetur ridiculus mus. Nullam dignissim.\n        </p>\n    </>;\n}\n","import TodoList from \"./TodoList\";\nimport Welcome from \"./Welcome\";\nimport styles from \"./App.module.css\";\nimport React from \"react\";\n\nenum Nav {\n    Welcome,\n    TodoList,\n}\n\ninterface NavEntryProps {\n    readonly children: React.ReactNode;\n    readonly nav: Nav;\n    readonly selectedNav: Nav;\n    readonly setSelectedNav: (newSelectedNav: Nav) => void;\n}\n\nfunction NavEntry(props: NavEntryProps): JSX.Element {\n    const {children, nav, selectedNav, setSelectedNav} = props;\n    return (\n        <div\n            className={nav === selectedNav ? styles.navEntrySelected : styles.navEntry}\n            onClick={(): void => { setSelectedNav(nav); }}\n        >\n            {children}\n        </div>\n    );\n}\n\nexport default function App(): JSX.Element {\n    const [selectedNav, setSelectedNav] = React.useState(Nav.Welcome);\n    let content: React.ReactNode;\n    switch (selectedNav) {\n        case Nav.Welcome:\n            content = <Welcome />;\n            break;\n        case Nav.TodoList:\n            content = <TodoList />;\n            break;\n    }\n    return <>\n        <div className={styles.header}>\n            <div className={styles.container}>\n                <div className={styles.branding}>\n                    CRFS Todo Manager\n                </div>\n            </div>\n        </div>\n        <div className={styles.nav}>\n            <div className={styles.container}>\n                <NavEntry nav={Nav.Welcome} selectedNav={selectedNav} setSelectedNav={setSelectedNav}>\n                    Welcome\n                </NavEntry>\n                <NavEntry nav={Nav.TodoList} selectedNav={selectedNav} setSelectedNav={setSelectedNav}>\n                    Todo\n                </NavEntry>\n            </div>\n        </div>\n        <div className={styles.container}>\n            <div className={styles.content}>\n                {content}\n            </div>\n        </div>\n    </>;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"header\":\"App_header__3ZZ1n\",\"branding\":\"App_branding__1f1hV\",\"nav\":\"App_nav__1_46_\",\"navEntry\":\"App_navEntry__G3KK3\",\"navEntrySelected\":\"App_navEntrySelected__oO-h0 App_navEntry__G3KK3\",\"content\":\"App_content__3La4L\"};"],"sourceRoot":""}